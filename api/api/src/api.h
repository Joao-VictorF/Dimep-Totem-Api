// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#ifndef API_H
#define API_H

#include <ngrest/common/Service.h>

#include <string>
#include <map>

// *location: api
struct Icon {
    std::string icon;
    std::string text;
};

struct MessagesGeneral {
    Icon IOError;
    Icon serverError;
    Icon tryConnect;
    Icon testIO;
};

struct MessagesEntry {
    Icon clearedToGo;
    Icon empty;
    Icon invalid;
    Icon pressButton;
    Icon removeTicket;
    Icon validateTicket;
    Icon welcome;
    Icon parkingFull;
};

struct MessagesExit {
    Icon clearedToGo;
    Icon empty;
    Icon errorReadingCard;
    Icon goToAdministration;
    Icon insertCard;
    Icon nonAuthorized;
    Icon validateTicket;
    Icon vehicleDoesntMatch;
};

struct Config {
    enum class TotemType {
        Entrada,
        Saida
    };
    
    enum class MensalistCardType {
        Intercalado,
        ACURA,
        MIFARE,
        ABA,
        Personalizado
    };

    TotemType type;
    std::string clientCode;
    std::string address;
    std::string interphoneIP;
    MensalistCardType mensalistType;
    std::string personalizedMensalistCardCode;
    bool codeCardFormat;
    bool paperSensor;
    bool openedGateSensor;
    bool closedGateSensor;
    bool automaticCarCharging;
    bool automaticMotoCharging;
    bool activateEquipment;
    bool fullCourtyard;
    bool accessControl;
    std::string expansionPort;
    std::string rfidPort;
    std::string barcodePort;
    std::string printerPort;
    bool useDefaultIcons;
    int adCount;
    std::string adOne;
    std::string adTwo;
    std::string adThree;
    std::string adFour;
    std::string adFive;
    std::string adSix;
    std::string adSeven;
    std::string adEight;
    std::string adNine;
    std::string adTen;
    MessagesGeneral messagesGeneral;
    MessagesEntry messagesEntry;
    MessagesExit messagesExit;
};

struct Response {
    bool success;
    std::string message;
};

struct GetResponse {
    bool success;
    std::string message;
    Config config;
};

class api: public ngrest::Service
{
public:
    // *method: POST
    // *location: /
    Response updateConfig(std::string token, Config config);

    // *method: GET
    // *location: /
    Config getConfig(std::string token);
};

#endif // API_H



